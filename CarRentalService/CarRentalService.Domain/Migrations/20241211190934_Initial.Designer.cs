// <auto-generated />
using System;
using CarRentalService.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarRentalService.Domain.Migrations
{
    [DbContext(typeof(CarRentalServiceDbContext))]
    [Migration("20241211190934_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarRentalService.Domain.Entity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport_number");

                    b.HasKey("Id");

                    b.ToTable("client");
                });

            modelBuilder.Entity("CarRentalService.Domain.Entity.RentalPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("RentalPoints");
                });

            modelBuilder.Entity("CarRentalService.Domain.Entity.RentalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RentalDurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("rental_duration_days");

                    b.Property<DateTime?>("RentalEnd")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rental_end");

                    b.Property<DateTime>("RentalStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rental_start");

                    b.Property<int>("client")
                        .HasColumnType("integer");

                    b.Property<int>("rental_point")
                        .HasColumnType("integer");

                    b.Property<int>("return_point")
                        .HasColumnType("integer");

                    b.Property<int>("vehicle")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("client");

                    b.HasIndex("rental_point");

                    b.HasIndex("return_point");

                    b.HasIndex("vehicle");

                    b.ToTable("RentalRecords");
                });

            modelBuilder.Entity("CarRentalService.Domain.Entity.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("CarRentalService.Domain.Entity.RentalRecord", b =>
                {
                    b.HasOne("CarRentalService.Domain.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalService.Domain.Entity.RentalPoint", "RentalPoint")
                        .WithMany()
                        .HasForeignKey("rental_point")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalService.Domain.Entity.RentalPoint", "ReturnPoint")
                        .WithMany()
                        .HasForeignKey("return_point")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarRentalService.Domain.Entity.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("RentalPoint");

                    b.Navigation("ReturnPoint");

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
